this.diagram = {
	data: {
		100: {n: "Model", t: "T"},
		101: {n: "State", t: "O", o: ["Live", "Planned"]}
		102: {n: "Reviewed", t: "C"}
	},
	datatemplate: {
		100: {name: "A NAME", data: [100, 102, 101, ...]}
	}
	
	l2: {
		base: {
			0: {
						type: "F",
						name: "Floor"
						px: 0, py: 0, pz: 0, 
						rx: 0, ry: 0, rz: 0,
						sx: 20, sy: .5, sz: 20,
						color: 0xffffff,
						t1name: "b1_t1",
						t2name: "b2_t1",
						tsx: 1,
						tsy: 1,
						data: [],
			},
		},
		text: {
			0: {
				type: "F",										    -> F: Floor
				text: "Hola.\n\nesto es un texto.",

				base: 0,											-> Base element used to calculate position				
				px: 0, py: 0, pz: 0, 
				rx: 0, ry: 0,
				height: .3,
				depth: .01,

				color: 0xffffff,
			}
		},
		symbol: {
			0: {
				type: "F",										-> F: Flag, V: right, X: wrong, A: arrow

				base: 0,											-> Base element used to calculate position				
				px: 0, py: 0, pz: 0, 
				rx: 0, ry: 0, rz: 0,
				sx: 1, sy: 1, sz: 1,
				color: 0xff0000,

				cd: {											-> data specific to the type
					flagcolor: 0x00ff00,
				}
				data: [],
			}
		},
		device: {
			0: {
				name: "a dev name",
				type: "R",		                                 	-> R: router, X: switch, F: firewall, S: server, M: multilayer 
				ifnaming: [
					"Ethernet{1-40}/{1-4}",
					"Ethernet{41-44}"
				],
				base: 0,											-> Base element used to calculate position
				px: 0, py: 0, pz: 0,
				sx: 1, sy: 1, sz: 1,
				rx: 0, ry: 0, rz: 0,
				color1: 0xffffff,
				color2: 0xffffff,
				vlans: {
					"5": {name: "VLAN5"},
					"6": {name: "DMZ"},
				},
				vrfs: {
					"65000:1" : {
							name: "default",
					"65000:2" : {
							name: "aditional_vrf",
					}
				},
				svis: {
					5: {
						name: "vlan5",
						ipv4: [],
						ipv6: []
					}
				},
				los: {												-> Loopbacks
					5: {
						name: "lo5",
						ipv4: [],
						ipv6: []
					}
				},
				data: [
				],
			}
		},
		link: {
			0: {
				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				phy: {
					"ifbindings": [									-> if more than one, then it's considered a lag
						["Ethernet1", "Ethernet2"],
						["Ethernet3", "Ethernet8/1"]
					],
					"lag_name": ["Po0", "Po0"],
					"lacp": true,
					"transceiver": "10BASET"
				}
				devs: [
					{
						id: 0,
						data: { ... }								-> See at the end options for interface data
					},
					{
						id: 1,
						data: { ... }
					},
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
				
			}
		},
	},

	l3: {
		base: {
			# Same as l2
		}

		l2segment: {
			0: {
					l2_reference: {
						device_id: device_id,
						vlan_id: vlan_id
					}
					base: 0,											-> Base element used to calculate position
					type: "VLAN"										-> For now, only type vlan will exist. determines the shape of this element
					px: 0, py: 0, pz: 0,
					sx: 1, sy: 1, sz: 1,
					rx: 0, ry: 0, rz: 0,
					color1: 0xffffff,

			}
		}
		l2link: {
			0: {
				l2_reference: {
					src_device_id: device_id,
					src_iface_id:
					dst_device_id: device_id,
					dst_iface_id:
				}
				l3_reference: {
					src_l2segment_id: 0,
					dst_l2segment_id: 1,
				}
				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
			}
		}
		vrf: {
			0: {
					l2_reference: {
						device_id: device_id,
						vrf_id: vrf_id
					}			

					base: 0,											-> Base element used to calculate position
					type: "R"										
					px: 0, py: 0, pz: 0,
					sx: 1, sy: 1, sz: 1,
					rx: 0, ry: 0, rz: 0,
					color1: 0xffffff,
			}
		},
		p2p_interface: {
			0: {
				l2_reference: {
					src_device_id: device_id,
					src_iface_id:
					src_subif_id:
					dst_device_id: device_id,
					dst_iface_id:
					dst_subif_id:
				}

				l3_reference: {
					src_vrf_id: 0,
					dst_vrf_id: 1,
				}

				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
			}
		}
		interfaces: {
			0: {
				l2_reference: {
					src_device_id: device_id,
					src_iface_id:
					src_subif_id:
					dst_device_id: device_id,
					dst_vlan_id:
				}

				l3_reference: {
					src_vrf_id: 0,
					dst_l2segment_id: 1,
				}

				type: 0,											-> 0: line, 1: square, 2: curve
				order: "XY",										-> order in which square interfaces are drawn (XY, YX, XZ, ZX, YZ, ZY)
				linedata: {
					height: .25,
					weight: 1,
					color: 0xffffff,
					points: [										-> Aditional points. Only valid for type 0.
						[0,0,0],
					],
				}
			}
		}

	}
}




PHYSICAL INTERFACES DATA OPTIONS
	SWITCHING INTERFACE
						function: "switching"
						function_data: {
							vlans: [1,2,3, ...]
							native_vlan: 3					-> -1 if no native vlan
						}
	ROUTING INTERFACE
						function: "routing"
						function_data: {
							subinterfaces: [
								0: {
									vlan_tag: -1, (native)
									ipv4: ["100.0.0.1/24", ...]
									ipv6: [],
									vrf: "65001:1"					-> this is the rd
								}
								1: {
									vlan_tag: 2,
									ipv4: [],
									ipv6: [],
									vrf: "1"
								}
							]
						}
	UNCONFIGURED INTERFACE
						function: "none",
						function_data: {}
